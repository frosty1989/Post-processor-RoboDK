# decompyle3 version 3.3.2
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]
# Embedded file name: C:\RoboDK\Posts\Fanuc_R30iA.py
# Compiled at: 2020-07-06 18:12:25
# Size of source mod 2**32: 55283 bytes
DRIPFEED_FILE = '# Drip Feed python script generated by RoboDK for Fanuc robot controllers\n# To use: simply run the script and follow on screen instructions\n# You can double click this file to run the script\n# Make sure to install RoboDK on the computer you want to use to dripfeed your program\n# (a RoboDK license is not required to run this script)\n\nimport os\nimport sys\nimport time\nimport socket\nimport ftplib\nfrom ftplib import FTP\n\nRobotFTPIP = "%s"\nRobotFTPPath = "%s"\nRobotFTPUsername = "%s"\nRobotFTPPassword = "%s"\nfMainFile = "%s"\nflFilesToSend = %s\n\n# Define timeout to reconnect or send in Seconds\nTIMEOUT = 1\n\n# Fix robot path\n# RobotFTPPath = r\'\'\'\'\'\' + RobotFTPPath\n\ndef SafeFTPDelete(filename, show_warning=False):\n    filesave_TP = filename[:-3] + \'.tp\'\n    try:\n        ftpRobot.delete(filesave_TP.lower())\n    except:\n        if show_warning and filesave_TP == filename:\n            print("Warning! Unable to delete file: " + filesave_TP.lower())\n        \n    filesave_LS = filename[:-3] + \'.ls\'\n    try:\n        ftpRobot.delete(filesave_LS.lower())\n    except:\n        if show_warning and filesave_LS == filename:\n            print("Warning! Unable to delete file: " + filesave_LS.lower())\n        \n    return 0\n    \ndef SendFTPFile(filename):\n    # first, try TP file:\n    filesave_TP = filename[:-3] + \'.TP\'\n    if filename.endswith(".LS") and os.path.isfile(filesave_TP):\n        filename = filesave_TP\n    \n    while True:\n        writeCmdFTP = ""\n        writeCmdFTP = "STOR " + filename\n        try:\n            print("Sending file: " + filename)\n            ftpRobot.storbinary(writeCmdFTP, open(filename, \'rb\'))\n            return 0\n            \n        except:\n            print("    Error Sending File: " + filename + ". Is the robot running this program?")\n            time.sleep(TIMEOUT)\n        \n    return 0\n    \ndef GetFilesFromFTP():\n    ftpRobot.cwd("md:")\n    ftpRobot.retrbinary(\'RETR curpos.dg\', open(\'curpos.dg\', \'wb+\').write)\n    ftpRobot.retrbinary(\'RETR prgstate.dg\', open(\'prgstate.dg\', \'wb+\').write)\n    ftpRobot.cwd(RobotFTPPath)\n    return\n    \ndef GetCurrentTask():\n    curSubName = GetCurRunningTasks()\n    if (curSubName == []):\n        return -1\n        \n    curSubName = curSubName[0]\n    counter = 0\n    for compSubName in flFilesToSend:\n        compSubName = compSubName[:-3] #Truncate file extension\n        if (curSubName.upper() == compSubName.upper()):\n            return counter\n            \n        counter = counter + 1\n        \n    return -1\n    \ndef GetCurJoints():\n    FILE_CURPOS = \'curpos.dg\'\n    joints = [0]*20\n    nDOFs = 0\n    with open(FILE_CURPOS,\'r\') as fid:\n        lines = fid.readlines()\n        for line in lines:\n            line = line.strip()\n            if line.startswith("Joint ") and \':\' in line:\n                lineinfo = line.replace(\':\',\' \').split(\' \')\n                lineinfo = [x for x  in lineinfo if x]\n                if len(lineinfo) >= 3:\n                    jid = int(lineinfo[1])\n                    jval = float(lineinfo[2])\n                    joints[nDOFs] = jval\n                    nDOFs += 1\n                    \n                else:\n                    print("Something is wrong: " + str(lineinfo))\n                    \n    joints = joints[:nDOFs]\n    return joints\n    \ndef GetCurRunningTasks():\n    proglist = []\n    FILE_PRGSTAT = \'prgstate.dg\'\n    with open(FILE_PRGSTAT,\'r\') as fid:\n        lines = fid.readlines()\n        for line in lines:\n            line = line.strip()\n            FindMainProgRunning = fMainFile\n            FindMainProgRunning = FindMainProgRunning[:-3] + " "\n            FindMainProgRunning = FindMainProgRunning + \'RUNNING @ \'\n            FindMainProgRunning = FindMainProgRunning.upper()\n            FindMainProgPaused = fMainFile\n            FindMainProgPaused = FindMainProgRunning[:-3] + " "\n            FindMainProgPaused = FindMainProgRunning + \'PAUSED @ \'\n            FindMainProgPaused = FindMainProgRunning.upper()\n            if FindMainProgRunning in line:\n                lineinfo = line.split(\' \')\n                lineinfo = [x for x  in lineinfo if x]\n                proglist.append(lineinfo[6])\n                \n            elif FindMainProgPaused in line:\n                lineinfo = line.split(\' \')\n                lineinfo = [x for x  in lineinfo if x]\n                proglist.append(lineinfo[6])\n                \n    return proglist\n    \nif __name__ == "__main__":\n\n    try:\n        print("Drip feeder script to load programs to Fanuc robot controllers (LS or TP files).")\n        print("This program allows you to run large robot programs to Fanuc robot controllers.")\n        print("This script was automatically created by RoboDK.")\n        print("Important: Do not modify this file. Change the RoboDK project instead and generate the program.")\n        print("For more information visit:")\n        print("    https://robodk.com/doc/en/Robots-Fanuc.html")\n        print("")\n        # Change current directory to this directory (in case we run this file from another directory)\n        folder_files = os.path.dirname(__file__)\n        print("Program files directory: " + folder_files)\n        os.chdir(folder_files)\n        \n        print("Main program to run: " + fMainFile)\n        \n        numFilesToSend = len(flFilesToSend)\n        print("    Number of subprograms: " + str(numFilesToSend))\n        \n        if numFilesToSend <= 3:\n            #raise Exception("Program is less than 3 files, no drip feed nessesary")\n            print("")\n            print("    (the program is split in less than 3 files: Drip feeding is not nessesary)")\n            print("    (sending programs anyway...)")\n            #input("Press any key to close")\n            #quit()\n\n        #input("Press enter to load the files")\n\n        numFilesToSend = len(flFilesToSend)\n        nCurrentTaskRunning = 0\n\n        if (RobotFTPIP == ""):\n            input("Robot FTP IP not defined, edit the top of the script to fix")\n            sys.exit()\n            \n        if (RobotFTPUsername == ""):\n            RobotFTPUsername = "anonymous"\n            #input("Robot FTP username not defined, edit the top of the script to fix")\n            #sys.exit()        \n             \n        ftpRobot = None\n        while True:\n            print("")\n            print("Trying to connect to Fanuc robot controller: " + RobotFTPIP + " ...")\n            try:\n                ftpRobot = FTP(RobotFTPIP) #Connect\n                ftpRobot.login()\n                break\n                \n            except Exception as e:\n                print("    " + str(e))\n                print("    Unable to connect. Make sure the FTP server is running and no other clients are connected.")\n                time.sleep(TIMEOUT)\n            \n        print("")\n        print("Connected!")\n        GetFilesFromFTP()\n        \n        print("")\n        print("Current robot position:")\n        print(GetCurJoints())\n        \n        print("")\n        print("Current running tasks:")\n        print(GetCurRunningTasks())\n        \n        print("")\n        print("Files to send:")\n        print(flFilesToSend)\n        \n        SafeFTPDelete(fMainFile)\n        \n        for subFileName in flFilesToSend:\n            SafeFTPDelete(subFileName)\n            \n        SendFTPFile(fMainFile)\n        for i in range(min(3, numFilesToSend)):\n            SendFTPFile(flFilesToSend[i])\n            \n        ftpRobot.quit()\n        displayMessage = "Waiting for: " + fMainFile + " to be run."\n        print(displayMessage)\n        print("")\n        print("    If you are resuming a partially completed program,")\n        print("    make sure the robot has the current subroutine it\'s on")\n        print("    and the next two subroutines after that. Disconect")\n        print("    your ftp client and then resume the robot program.")\n        print("")\n        nCurrentTaskRunning = -1\n        while (nCurrentTaskRunning == -1):\n            try:\n                ftpRobot = FTP(RobotFTPIP) #Connect\n                ftpRobot.login()\n                ftpRobot.cwd(RobotFTPPath)\n                GetFilesFromFTP()\n                ftpRobot.quit()\n                #Disconect and reconect to allow the user to manually ftp a file over\n                nCurrentTaskRunning = GetCurrentTask()\n            except:\n                time.sleep(TIMEOUT)\n                \n            time.sleep(TIMEOUT)\n            \n        print("Starting drip feed sequence")\n        #Reconect for drip feeding\n        ftpRobot = FTP(RobotFTPIP) #Connect\n        ftpRobot.login()\n        ftpRobot.cwd(RobotFTPPath)\n\n        fExit = False\n        previousTaskRunning = nCurrentTaskRunning\n        while (fExit != True):\n            GetFilesFromFTP() # update the local files\n            tempNum = GetCurrentTask()\n            if (tempNum != -1):\n                nCurrentTaskRunning = tempNum\n                \n            if ( (nCurrentTaskRunning > previousTaskRunning) ):\n                previousTaskRunning = nCurrentTaskRunning #Increment a position\n                #Delete the previous file for space\n                if (nCurrentTaskRunning > 0):\n                    SafeFTPDelete(flFilesToSend[nCurrentTaskRunning-1], True)\n                    \n                #Send the next one\n                if ( (nCurrentTaskRunning+3-1) < numFilesToSend):\n                    SendFTPFile(flFilesToSend[nCurrentTaskRunning+3-1])\n                    \n            if (previousTaskRunning == (numFilesToSend-1) ):\n                fExit = True\n                \n            time.sleep(TIMEOUT)\n            \n        print("Cleaning up")\n        SafeFTPDelete(fMainFile, True)\n        SafeFTPDelete(flFilesToSend[numFilesToSend-1], True)\n        print("Job Completed Successfully")\n        \n    except Exception as e:\n        print("Unexpected Error: " + str(e))\n\n    print("")\n    input("Done. Press any key to close")\n'

def get_safe_name(progname, max_chars=10):
    """Get a safe program name"""
    for c in '-[]/\\;,><&*:%=+@!#^()|?^':
        progname = progname.replace(c, '')

    if len(progname) <= 0:
        progname = 'Program'
    if progname[0].isdigit():
        progname = 'P' + progname
    if len(progname) > max_chars:
        progname = progname[:max_chars]
    return progname


from robodk import *
import sys, os

class RobotPost(object):
    __doc__ = 'Robot post object defined for Fanuc robots'
    MAX_LINES_X_PROG = 9999
    INCLUDE_SUB_PROGRAMS = True
    # INCLUDE_SUB_PROGRAMS = False
    JOINT_SPEED = '20%'
    SPEED = '200mm/sec'
    CNT_VALUE = 'FINE'
    ACTIVE_UF = 9
    ACTIVE_UT = 9
    SPARE_PR = 9
    TURNTABLE_GROUP = 'GP2'
    FANUC_RJ3_COMPATIBLE = False
    PATH_MAKE_TP = 'C:/Program Files (x86)/FANUC/WinOLPC/bin/'
    DRIPFEED_FILE_NAME = None
    FORCE_POPUP_SAVE = False
    LINE_COUNT = 0
    P_COUNT = 0
    nProgs = 2
    # nProgs = 0
    LBL_ID_COUNT = 0
    PROG_EXT = 'LS'
    ROBOT_POST = ''
    ROBOT_NAME = ''
    PROG_FILES = []
    PROG_NAMES = []
    PROG_LIST = []
    PROG_NAME = 'unknown'
    PROG_NAME_CURRENT = 'unknown'
    nPages = 0
    PROG_NAMES_MAIN = []
    PROG = []
    PROG_TARGETS = []
    LOG = ''
    nAxes = 6
    AXES_TYPE = ['R', 'R', 'R', 'R', 'R', 'R']
    AXES_TRACK = []
    AXES_TURNTABLE = []
    HAS_TRACK = False
    HAS_TURNTABLE = False
    HAS_EXTAXES = False
    EXTAXES_FLAGS = ['1', '*', '*', '*', '*']
    SPEED_BACKUP = None
    LAST_POSE = None
    ROBOT_IP = 'unknown-ip'

    def __init__(self, robotpost=None, robotname=None, robot_axes=6, **kwargs):
        self.ROBOT_POST = robotpost
        self.ROBOT_NAME = robotname
        self.nAxes = robot_axes
        self.PROG = []
        self.LOG = ''
        for k, v in kwargs.items():
            if k == 'lines_x_prog':
                self.MAX_LINES_X_PROG = v
            if k == 'axes_type':
                self.AXES_TYPE = v
            if k == 'ip_com':
                self.ROBOT_IP = v

        for i in range(len(self.AXES_TYPE)):
            if self.AXES_TYPE[i] == 'T':
                self.AXES_TRACK.append(i)
                self.HAS_TRACK = True
                self.HAS_EXTAXES = True
            if self.AXES_TYPE[i] == 'J':
                self.AXES_TURNTABLE.append(i)
                self.HAS_TURNTABLE = True
                self.HAS_EXTAXES = True

    def ProgStart(self, progname, new_page=False):
        progname = get_safe_name(progname)
        progname_i = progname
        if new_page:
            if self.nPages == 0:
                if len(self.PROG_NAMES_MAIN) > 0:
                    print("Can't split %s: Two or more programs are split into smaller programs" % progname)
                    print(self.PROG_NAMES_MAIN)
                    raise Exception('Only one program at a time can be split into smaller programs')
                self.PROG_NAMES_MAIN.append(self.PROG_NAME)
                self.nPages = self.nPages + 1
            self.nPages = self.nPages + 1
            progname_i = '%s%i' % (self.PROG_NAME, self.nPages)
            self.PROG_NAMES_MAIN.append(progname_i)
        else:
            if self.nProgs > 1:
                if not self.INCLUDE_SUB_PROGRAMS:
                    return
            self.PROG_NAME = progname
            self.nProgs = self.nProgs + 1
        self.PROG_NAME_CURRENT = progname_i
        self.PROG_NAMES.append(progname_i)

    def ProgFinish(self, progname, new_page=False):
        progname = get_safe_name(progname)
        if not new_page:
            self.nPages = 0
        header = ''
        header = header + '/PROG  %s' % self.PROG_NAME_CURRENT + '\n'
        header = header + '/ATTR' + '\n'
        header = header + 'OWNER\t\t= MNEDITOR;' + '\n'
        header = header + 'COMMENT\t\t= "RoboDK sequence";' + '\n'
        header = header + 'PROG_SIZE\t= 0;' + '\n'
        header = header + 'CREATE\t\t= DATE 31-12-14  TIME 12:00:00;' + '\n'
        header = header + 'MODIFIED\t= DATE 31-12-14  TIME 12:00:00;' + '\n'
        header = header + 'FILE_NAME\t= %s;' % self.PROG_NAME_CURRENT + '\n'
        header = header + 'VERSION\t\t= 0;' + '\n'
        header = header + 'LINE_COUNT\t= %i;' % self.LINE_COUNT + '\n'
        header = header + 'MEMORY_SIZE\t= 0;' + '\n'
        header = header + 'PROTECT\t\t= READ_WRITE;' + '\n'
        header = header + 'TCD:  STACK_SIZE\t= 0,' + '\n'
        header = header + '      TASK_PRIORITY\t= 50,' + '\n'
        header = header + '      TIME_SLICE\t= 0,' + '\n'
        header = header + '      BUSY_LAMP_OFF\t= 0,' + '\n'
        header = header + '      ABORT_REQUEST\t= 0,' + '\n'
        header = header + '      PAUSE_REQUEST\t= 0;' + '\n'
        if self.HAS_EXTAXES:
            header = header + 'DEFAULT_GROUP\t= ' + ','.join(self.EXTAXES_FLAGS)
            if not self.FANUC_RJ3_COMPATIBLE:
                header = header + ',*,*'
            header = header + ';\n'
        elif self.FANUC_RJ3_COMPATIBLE:
            header = header + 'DEFAULT_GROUP\t= 1,*,*,*,*;' + '\n'
        else:
            header = header + 'DEFAULT_GROUP\t= 1,*,*,*,*,*,*;' + '\n'
        header = header + 'CONTROL_CODE\t= 00000000 00000000;' + '\n'
        if self.HAS_TURNTABLE:
            header = header + '/APPL' + '\n'
            header = header + '' + '\n'
            header = header + 'LINE_TRACK;' + '\n'
            header = header + 'LINE_TRACK_SCHEDULE_NUMBER      : 0;' + '\n'
            header = header + 'LINE_TRACK_BOUNDARY_NUMBER      : 0;' + '\n'
            header = header + 'CONTINUE_TRACK_AT_PROG_END      : FALSE;' + '\n'
            header = header + '' + '\n'
        header = header + '/MN'
        self.PROG.insert(0, header)
        self.PROG.append('/POS')
        self.PROG += self.PROG_TARGETS
        self.PROG.append('/END')
        self.PROG_LIST.append(self.PROG)
        self.PROG = []
        self.PROG_TARGETS = []
        self.LINE_COUNT = 0
        self.P_COUNT = 0
        self.LBL_ID_COUNT = 0

    def progsave(self, folder, progname, ask_user=False, show_result=False):
        if not (ask_user or DirExists(folder)):
            folder = getSaveFolder(folder, 'Select a directory to save your program')
            if folder is None:
                return
        filesave = folder + '/' + progname + '.' + self.PROG_EXT
        with open(filesave, 'w', encoding='shift_jis') as fid:
            for line in self.PROG:
                fid.write(line)
                fid.write('\n')

        print('SAVED: %s\n' % filesave)
        self.PROG_FILES.append(filesave)
        filesave_TP = filesave[:-3] + '.TP'
        if os.path.isfile(filesave_TP):
            os.remove(filesave_TP)
        if show_result:
            if type(show_result) is str:
                import subprocess
                p = subprocess.Popen([show_result, filesave])
            elif type(show_result) is list:
                import subprocess
                p = subprocess.Popen(show_result + [filesave])
            else:
                os.startfile(filesave)
        sFileExtention = '.LS'
        if self.PATH_MAKE_TP is not None:
            if FileExists(self.PATH_MAKE_TP + 'MakeTP.exe'):
                print('POPUP: Compiling LS file with MakeTP.exe: %s...' % progname)
                sFileExtention = '.TP'
                sys.stdout.flush()
                import subprocess
                command = [self.PATH_MAKE_TP + 'MakeTP.exe', filesave.replace('/', '\\'), filesave_TP.replace('/', '\\'), '/config', self.PATH_MAKE_TP + 'robot.ini']
                self.LOG += 'Program generation for: ' + progname + '\n'
                with subprocess.Popen(command, stdout=(subprocess.PIPE), bufsize=1, universal_newlines=True) as p:
                    for line in p.stdout:
                        line_ok = line.strip()
                        self.LOG += line_ok + '\n'
                        print('POPUP: ' + line_ok)
                        sys.stdout.flush()

                self.LOG += '\n'

    def ProgGenerateAssistScript(self, folder, prognames, scriptName, progMain, ftpparam, trigger_start=True):
        filenameToOpen = folder + '/' + scriptName
        sFileExtention = '.LS'
        if self.PATH_MAKE_TP is not None:
            if FileExists(self.PATH_MAKE_TP + 'MakeTP.exe'):
                sFileExtention = '.TP'
        localProgNamesCopy = []
        for progName in prognames:
            progName = progName + sFileExtention
            localProgNamesCopy.append(progName)

        param_list = ftpparam
        param_list.append(progMain + sFileExtention)
        param_list.append(str(localProgNamesCopy))
        with open(filenameToOpen, 'w+') as fid:
            fid.write(DRIPFEED_FILE % tuple(param_list))
        if trigger_start:
            import subprocess, sys
            print('POPUP: Running dripfeeder')
            sys.stdout.flush()
            command = 'start "" "' + sys.executable + '" "' + filenameToOpen + '"'
            print('Running command: ' + command)
            sys.stdout.flush()
            os.system(command)

    def ProgSave(self, folder, progname, ask_user=False, show_result=False):
        ask_user = ask_user or self.FORCE_POPUP_SAVE
        progname = get_safe_name(progname)
        nfiles = len(self.PROG_LIST)
        if nfiles >= 1:
            if self.LINE_COUNT > 0:
                print('Warning: ProgFinish was not called properly')
                self.PROG_LIST.append(self.PROG)
                self.PROG_NAMES.append('Unknown')
                self.PROG = []
                self.LINE_COUNT = 0
            if len(self.PROG_NAMES_MAIN) > 1:
                progname_main = 'M_' + self.PROG_NAMES_MAIN[0]
                self.INCLUDE_SUB_PROGRAMS = True
                self.ProgStart(progname_main)
                for prog_call in self.PROG_NAMES_MAIN:
                    self.RunCode(prog_call, True)

                self.ProgFinish(progname_main)
            self.PROG = self.PROG_LIST.pop()
            progname_last = self.PROG_NAMES.pop()
            self.progsave(folder, progname_last, ask_user, show_result)
            if len(self.PROG_FILES) == 0:
                return
            first_file = self.PROG_FILES[0]
            folder_user = getFileDir(first_file)
            for i in range(len(self.PROG_LIST)):
                if show_result:
                    if i > 2:
                        show_result = False
                self.PROG = self.PROG_LIST[i]
                self.progsave(folder_user, self.PROG_NAMES[i], False, show_result)

        elif nfiles == 1:
            self.PROG = self.PROG_NAMES[0]
            self.progsave(folder, progname, ask_user, show_result)
            if len(self.PROG_FILES[0]):
                return
            first_file = self.PROG_FILES[0]
            folder_user = getFileDir(first_file)
        else:
            print('Warning! Program has not been properly finished')
            self.progsave(folder, progname, ask_user, show_result)
        if self.DRIPFEED_FILE_NAME is not None:
            self.ProgGenerateAssistScript(folder_user, self.PROG_NAMES, self.DRIPFEED_FILE_NAME, self.PROG_NAME, [self.ROBOT_IP, 'md:/', 'anonymous', ''], False)
        if show_result:
            if len(self.LOG) > 0:
                mbox('Program generation LOG:\n\n' + self.LOG)

    def ProgSendRobot(self, robot_ip, remote_path, ftp_user, ftp_pass):
        """Send a program to the robot using the provided parameters. This method is executed right after ProgSave if we selected the option "Send Program to Robot".
        The connection parameters must be provided in the robot connection menu of RoboDK"""
        if self.DRIPFEED_FILE_NAME is None:
            UploadFTP(self.PROG_FILES, robot_ip, remote_path, ftp_user, ftp_pass)
        else:
            first_file = self.PROG_FILES[0]
            folder_user = getFileDir(first_file)
            self.ProgGenerateAssistScript(folder_user, self.PROG_NAMES, self.DRIPFEED_FILE_NAME, self.PROG_NAME, [robot_ip, remote_path, ftp_user, ftp_pass])

    def MoveJ(self, pose, joints, conf_RLF=None):
        """Add a joint movement"""
        self.page_size_control()
        target_id = self.add_target_joints(pose, joints)
        move_ins = 'P[%i] %s %s ;' % (target_id, self.JOINT_SPEED, self.CNT_VALUE)
        self.addline(move_ins, 'J')
        self.LAST_POSE = pose

    def MoveL(self, pose, joints, conf_RLF=None):
        """Add a linear movement"""
        if self.LAST_POSE is not None:
            if pose is not None:
                if distance(pose.Pos(), self.LAST_POSE.Pos()) < 0.001:
                    if pose_angle_between(pose, self.LAST_POSE) < 0.001:
                        return
        self.page_size_control()
        if pose is None:
            target_id = self.add_target_joints(pose, joints)
            move_ins = 'P[%i] %s %s ;' % (target_id, self.SPEED, self.CNT_VALUE)
            # move_ins = 'P[1] %s %s ;' % (self.JOINT_SPEED, self.CNT_VALUE)
        else:
            target_id = self.add_target_cartesian(pose, joints, conf_RLF)
            move_ins = 'P[%i] %s %s ;' % (target_id, self.SPEED, self.CNT_VALUE)
            # move_ins = 'P[1] %s %s ;' % (self.JOINT_SPEED, self.CNT_VALUE)
        self.addline(move_ins, 'L')
        self.LAST_POSE = pose

    def MoveC(self, pose1, joints1, pose2, joints2, conf_RLF_1=None, conf_RLF_2=None):
        """Add a circular movement"""
        self.page_size_control()
        target_id1 = self.add_target_cartesian(pose1, joints1, conf_RLF_1)
        target_id2 = self.add_target_cartesian(pose2, joints2, conf_RLF_2)
        move_ins = 'P[%i] \n       P[%i] %s %s ;' % (target_id1, target_id2, self.SPEED, self.CNT_VALUE)
        self.addline(move_ins, 'C')
        self.LAST_POSE = pose2

    def setFrame(self, pose, frame_id=None, frame_name=None):
        """Change the robot reference frame"""
        xyzwpr = Pose_2_Fanuc(pose)
        if frame_id is None or frame_id < 0 or frame_id > 9:
            for i in range(6):
                self.addline('PR[%i,%i]=%.3f ;' % (self.SPARE_PR, i + 1, xyzwpr[i]))

            for i in range(6, self.nAxes):
                self.addline('PR[%i,%i]=%.3f ;' % (self.SPARE_PR, i + 1, 0))

            self.addline('UFRAME[%i]=PR[%i] ;' % (self.ACTIVE_UF, self.SPARE_PR))
            self.addline('UFRAME_NUM=%i ;' % self.ACTIVE_UF)
        else:
            self.ACTIVE_UF = frame_id
            self.addline('UFRAME_NUM=%i ;' % self.ACTIVE_UF)
            self.RunMessage('UF%i:%.1f,%.1f,%.1f,%.1f,%.1f,%.1f' % (frame_id, xyzwpr[0], xyzwpr[1], xyzwpr[2], xyzwpr[3], xyzwpr[4], xyzwpr[5]), True)
        frame_name_lower = frame_name.lower()
        if self.HAS_EXTAXES:
            if 'gp3' in frame_name_lower:
                self.TURNTABLE_GROUP = 'GP3'
                self.EXTAXES_FLAGS[2] = '1'
            elif 'gp2' in frame_name_lower:
                self.TURNTABLE_GROUP = 'GP2'
                self.EXTAXES_FLAGS[1] = '1'
            else:
                self.EXTAXES_FLAGS[1] = '1'

    def setTool(self, pose, tool_id=None, tool_name=None):
        """Change the robot TCP"""
        xyzwpr = Pose_2_Fanuc(pose)
        if tool_id is None or tool_id < 0 or tool_id > 9:
            for i in range(6):
                self.addline('PR[%i,%i]=%.3f ;' % (self.SPARE_PR, i + 1, xyzwpr[i]))

            for i in range(6, self.nAxes):
                self.addline('PR[%i,%i]=%.3f ;' % (self.SPARE_PR, i + 1, 0))

            self.addline('UTOOL[%i]=PR[%i] ;' % (self.ACTIVE_UT, self.SPARE_PR))
            self.addline('UTOOL_NUM=%i ;' % self.ACTIVE_UT)
        else:
            self.ACTIVE_UT = tool_id
            self.addline('UTOOL_NUM=%i ;' % self.ACTIVE_UT)
            self.RunMessage('UT%i:%.1f,%.1f,%.1f,%.1f,%.1f,%.1f' % (tool_id, xyzwpr[0], xyzwpr[1], xyzwpr[2], xyzwpr[3], xyzwpr[4], xyzwpr[5]), True)

    def Pause(self, time_ms):
        """Pause the robot program"""
        if time_ms <= 0:
            self.addline('PAUSE ;')
        else:
            self.addline('WAIT  %.2f(sec) ;' % (time_ms * 0.001))

    def setSpeed(self, speed_mms):
        """Changes the robot speed (in mm/s)"""
        if self.SPEED_BACKUP is None:
            self.SPEED = '%.0fmm/sec' % max(speed_mms, 0.01)
            self.JOINT_SPEED = '%.0f%%' % max(min(100.0 * speed_mms / 5000.0, 100.0), 1)
        else:
            self.SPEED_BACKUP = '%.0fmm/sec' % max(speed_mms, 0.01)

    def setAcceleration(self, accel_mmss):
        """Changes the robot acceleration (in mm/s2)"""
        self.addlog('setAcceleration not defined')

    def setSpeedJoints(self, speed_degs):
        """Changes the robot joint speed (in deg/s)"""
        self.JOINT_SPEED = '%.0f%%' % max(min(100.0 * speed_degs / 200.0, 100.0), 1)

    def setAccelerationJoints(self, accel_degss):
        """Changes the robot joint acceleration (in deg/s2)"""
        self.addlog('setAccelerationJoints not defined')

    def setZoneData(self, zone_mm):
        """Changes the zone data approach (makes the movement more smooth)"""
        if zone_mm < 0:
            self.CNT_VALUE = 'FINE'
        else:
            self.CNT_VALUE = 'CNT%i' % round(min(zone_mm, 100.0))

    def setDO(self, io_var, io_value):
        """Set a Digital Output"""
        if type(io_var) != str:
            io_var = 'DO[%s]' % str(io_var)
        if type(io_value) != str:
            if io_value > 0:
                io_value = 'ON'
            else:
                io_value = 'OFF'
        self.addline('%s=%s ;' % (io_var, io_value))

    def setAO(self, io_var, io_value):
        """Set an Analog Output"""
        self.setDO(io_var, io_value)

    def waitDI(self, io_var, io_value, timeout_ms=-1):
        """Waits for an input io_var to attain a given value io_value. Optionally, a timeout can be provided."""
        if type(io_var) != str:
            io_var = 'DI[%s]' % str(io_var)
        if type(io_value) != str:
            if io_value > 0:
                io_value = 'ON'
            else:
                io_value = 'OFF'
        if timeout_ms < 0:
            self.addline('WAIT %s=%s ;' % (io_var, io_value))
        else:
            self.LBL_ID_COUNT = self.LBL_ID_COUNT + 1
            self.addline('$WAITTMOUT=%i ;' % round(timeout_ms))
            self.addline('WAIT %s=%s TIMEOUT, LBL[%i] ;' % (io_var, io_value, self.LBL_ID_COUNT))
            self.addline('MESSAGE[Timed out for LBL %i] ;' % self.LBL_ID_COUNT)
            self.addline('PAUSE ;')
            self.addline('LBL[%i] ;' % self.LBL_ID_COUNT)

    def addlastline(self, add_params):
        """Add parameters to the last command"""
        if len(self.PROG) > 0:
            if self.PROG[(-1)].endswith(';'):
                self.PROG[-1] = self.PROG[(-1)][:-1] + add_params + ';'

    def RunCode(self, code, is_function_call=False):
        """Adds code or a function call"""
        if is_function_call:
            if len(self.PROG) > 0:
                str_search = ' ' + self.CNT_VALUE + ' '
                str_replace = ' FINE '
                self.PROG[-1] = self.PROG[(-1)].replace(str_search, str_replace)
            if code.lower().startswith('arcstart'):
                if not code.endswith(')'):
                    code = code + ')'
                self.ARC_PARAMS = code[9:-1]
                if len(self.ARC_PARAMS) < 1:
                    self.ARC_PARAMS = '2.0Hz,8.0mm,0.075s,0.075'
                self.addlastline('Arc Start[11]')
                self.addline('Weave Sine[%s] ;' % self.ARC_PARAMS)
                return
            if code.lower().startswith('arcend'):
                self.addlastline('Arc End[11]')
                if self.SPEED_BACKUP is not None:
                    self.SPEED = self.SPEED_BACKUP
                    self.SPEED_BACKUP = None
                self.ARC_PARAMS = None
                return
            code = get_safe_name(code, 12)
            code.replace(' ', '_')
            self.addline('CALL %s ;' % code)
        else:
            if not code.endswith(';'):
                code = code + ';'
            self.addline(code)

    def RunMessage(self, message, iscomment=False):
        """Add a comment or a popup message"""
        if iscomment:
            for i in range(0, len(message), 20):
                i2 = min(i + 20, len(message))
                self.addline('! %s ;' % message[i:i2])

        else:
            for i in range(0, len(message), 20):
                i2 = min(i + 20, len(message))
                self.addline('MESSAGE[%s] ;' % message[i:i2])

    def page_size_control(self):
        if self.LINE_COUNT >= self.MAX_LINES_X_PROG:
            self.ProgFinish(self.PROG_NAME, True)
            self.ProgStart(self.PROG_NAME, True)

    def addline(self, newline, movetype=' '):
        """Add a program line"""
        if self.nProgs > 1:
            if not self.INCLUDE_SUB_PROGRAMS:
                return
        self.page_size_control()
        self.LINE_COUNT = self.LINE_COUNT + 1
        newline_ok = '%4i:%s ' % (self.LINE_COUNT, movetype) + newline
        self.PROG.append(newline_ok)

    def addline_targets(self, newline):
        """Add a line at the end of the program (used for targets)"""
        self.PROG_TARGETS.append(newline)

    def addlog(self, newline):
        """Add a log message"""
        if self.nProgs > 1:
            if not self.INCLUDE_SUB_PROGRAMS:
                return
        self.LOG = self.LOG + newline + '\n'

    def add_target_joints(self, pose, joints):
        if self.nProgs > 1:
            if not self.INCLUDE_SUB_PROGRAMS:
                return
            self.P_COUNT = self.P_COUNT + 1
            add_comma = ''
            if self.HAS_TRACK:
                add_comma = ','
            self.addline_targets('P[%i]{' % self.P_COUNT)
            self.addline_targets('   GP1:')
            self.addline_targets('    UF : %i, UT : %i,    ' % (self.ACTIVE_UF, self.ACTIVE_UT))
            self.addline_targets('\tJ1=    %.3f deg,\tJ2=    %.3f deg,\tJ3=    %.3f deg,' % (joints[0], joints[1], joints[2]))
            self.addline_targets('\tJ4=    %.3f deg,\tJ5=    %.3f deg,\tJ6=    %.3f deg%s' % (joints[3], joints[4], joints[5], add_comma))
            if self.HAS_TRACK:
                track_str = ''
                for i in range(len(self.AXES_TRACK)):
                    track_str = track_str + '\tE%i=%10.3f  mm,' % (i + 1, joints[self.AXES_TRACK[i]])

                track_str = track_str[:-1]
                self.addline_targets(track_str)
            if self.HAS_TURNTABLE:
                self.addline_targets('   %s:' % self.TURNTABLE_GROUP)
                self.addline_targets('    UF : %i, UT : %i,' % (self.ACTIVE_UF, self.ACTIVE_UT))
                turntable_str = ''
                for i in range(len(self.AXES_TURNTABLE)):
                    turntable_str = turntable_str + '\tJ%i=%10.3f deg,' % (i + 1, joints[self.AXES_TURNTABLE[i]])

                turntable_str = turntable_str[:-1]
                self.addline_targets(turntable_str)
            self.addline_targets('};')
            # print('self.P_COUNT:')
            # print(self.P_COUNT)
            return self.P_COUNT

    def add_target_cartesian(self, pose, joints, conf_RLF=None):
        if self.nProgs > 1:
            if not self.INCLUDE_SUB_PROGRAMS:
                return

            def angle_2_turn(angle):
                if angle >= 0.0:
                    return +math.floor((+angle + 180.0) / 360.0)
                return -math.floor((-angle + 180.0) / 360.0)

            xyzwpr = Pose_2_Fanuc(pose)
            config = ['N', 'U', 'T']
            if conf_RLF is not None:
                if conf_RLF[2] > 0:
                    config[0] = 'F'
                if conf_RLF[1] > 0:
                    config[1] = 'D'
                if conf_RLF[0] > 0:
                    config[2] = 'B'
            turnJ1 = angle_2_turn(joints[0])
            turnJ4 = angle_2_turn(joints[3])
            turnJ6 = angle_2_turn(joints[5])
            self.P_COUNT = self.P_COUNT + 1
            add_comma = ''
            if self.HAS_TRACK:
                add_comma = ','
            self.addline_targets('P[%i]{' % self.P_COUNT)
            self.addline_targets('   GP1:')
            self.addline_targets("    UF : %i, UT : %i,        CONFIG : '%c %c %c, %i, %i, %i'," % (self.ACTIVE_UF, self.ACTIVE_UT, config[0], config[1], config[2], turnJ1, turnJ4, turnJ6))
            self.addline_targets('\tX =%10.3f  mm,\tY =%10.3f  mm,\tZ =%10.3f  mm,' % (xyzwpr[0], xyzwpr[1], xyzwpr[2]))
            self.addline_targets('\tW =%10.3f deg,\tP =%10.3f deg,\tR =%10.3f deg%s' % (xyzwpr[3], xyzwpr[4], xyzwpr[5], add_comma))
            if self.HAS_TRACK:
                track_str = ''
                for i in range(len(self.AXES_TRACK)):
                    track_str = track_str + '\tE%i=%10.3f  mm,' % (i + 1, joints[self.AXES_TRACK[i]])

                track_str = track_str[:-1]
                self.addline_targets(track_str)
            if self.HAS_TURNTABLE:
                self.addline_targets('   %s:' % self.TURNTABLE_GROUP)
                self.addline_targets('    UF : %i, UT : %i,' % (self.ACTIVE_UF, self.ACTIVE_UT))
                turntable_str = ''
                for i in range(len(self.AXES_TURNTABLE)):
                    turntable_str = turntable_str + '\tJ%i=%10.3f deg,' % (i + 1, joints[self.AXES_TURNTABLE[i]])

                turntable_str = turntable_str[:-1]
                self.addline_targets(turntable_str)
            self.addline_targets('};')
            return self.P_COUNT


def Pose(xyzrpw):
    x, y, z, r, p, w = xyzrpw
    a = r * math.pi / 180
    b = p * math.pi / 180
    c = w * math.pi / 180
    ca = math.cos(a)
    sa = math.sin(a)
    cb = math.cos(b)
    sb = math.sin(b)
    cc = math.cos(c)
    sc = math.sin(c)
    return Mat([[cb * ca, ca * sc * sb - cc * sa, sc * sa + cc * ca * sb, x], [cb * sa, cc * ca + sc * sb * sa, cc * sb * sa - ca * sc, y], [-sb, cb * sc, cc * cb, z], [0, 0, 0, 1]])


def test_post():
    """Test the post with a basic program"""
    robot = RobotPost('Fanuc_custom', 'Fanuc robot', 6)
    robot.ProgStart('Program')
    robot.RunMessage('Program generated by RoboDK', True)
    robot.setFrame(Pose([807.766544, -963.699898, 41.478944, 0, 0, 0]),5,"TEST")
    robot.setTool(Pose([62.5, -108.253175, 100, -60, 90, 0]))
    # robot.MoveJ(Pose([200, 200, 500, 180, 0, 180]), [-46.18419, -6.77518, -20.54925, 71.38674, 49.58727, -302.54752])
    robot.MoveL(Pose([200, 250, 348.734575, 180, 0, -150]), [-41.62707, -8.89064, -30.01809, 60.62329, 49.66749, -258.98418])
    robot.MoveL(Pose([200, 200, 262.132034, 180, 0, -150]), [-43.73892, -3.91728, -35.77935, 58.57566, 54.11615, -253.81122])
    robot.RunMessage('Setting air valve 1 on')
    robot.RunCode('TCP_On', True)
    robot.Pause(1000)
    robot.MoveL(Pose([200, 250, 348.734575, 180, 0, -150]), [-41.62707, -8.89064, -30.01809, 60.62329, 49.66749, -258.98418])
    robot.MoveL(Pose([250, 300, 278.023897, 180, 0, -150]), [-37.52588, -6.32628, -34.59693, 53.52525, 49.24426, -251.44677])
    robot.MoveL(Pose([250, 250, 191.421356, 180, 0, -150]), [-39.75778, -1.04537, -40.37883, 52.09118, 54.15317, -246.94403])
    robot.RunMessage('Setting air valve off')
    robot.RunCode('TCP_Off', True)
    robot.Pause(1000)
    robot.MoveL(Pose([250, 300, 278.023897, 180, 0, -150]), [-37.52588, -6.32628, -34.59693, 53.52525, 49.24426, -251.44677])
    robot.MoveL(Pose([250, 200, 278.023897, 180, 0, -150]), [-41.85389, -1.95619, -34.89154, 57.43912, 52.34162, -253.73403])
    robot.MoveL(Pose([250, 150, 191.421356, 180, 0, -150]), [-43.82111, 3.29703, -40.29493, 56.02402, 56.61169, -249.23532])
    robot.ProgFinish('Program')
    robot.PROG = robot.PROG_LIST.pop()
    for line in robot.PROG:
        print(line)

    if len(robot.LOG) > 0:
        mbox('Program generation LOG:\n\n' + robot.LOG)
    input('Press Enter to close...')


def test_post2():

    def p(v):
        return Pose(v)

    print('Total instructions: 25')
    r = RobotPost('Fanuc_R30iA', 'Fanuc ARC Mate 120iC', 9, axes_type=['R', 'R', 'R', 'R', 'R', 'R', 'T', 'T', 'T'], pose_rail=(p([2835.968412, 3817.764593, 1195.654333, -0.0, -0.0, 180.0])))
    r.ProgStart('Curve1')
    r.RunMessage('Program generated by RoboDK v3.5.3 for Fanuc ARC Mate 120iC on 10/11/2018 10:34:26', True)
    r.RunMessage('Using nominal kinematics.', True)
    r.setFrame(p([-13114.312225, 1641.490176, 3032.9674, -89.429405, -0.828158, 0.547393]), -1, 'Part Local Ref')
    r.setTool(p([6.579694, -0.871557, 381.879694, -0.0, 45.0, -0.0]), -1, 'Weld gun')
    r.setSpeed(1000.0)
    r.MoveJ(None, [83.882578, -15.754442, -46.523597, 49.296707, 69.533346, -29.398461, 2984.67809, 2570.1637, 563.830565], None)
    r.MoveL(p([-128.772331, 15775.117798, -2955.672119, 142.328568, 35.043147, -175.776553]), [83.882578, -15.754442, -46.523597, 49.296707, 69.533346, -29.398461, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.RunCode('ArcStart(2.0Hz,8.0mm,0.075s,0.075)', True)
    r.MoveL(p([-87.947502, 15734.292969, -3037.321777, 142.328568, 35.043147, -175.776553]), [87.328162, -15.924572, -40.474499, 48.176067, 63.664228, -32.552985, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.setSpeed(50.0)
    r.MoveL(p([-87.947502, 15740.364258, -3038.315186, 143.296306, 39.222486, -169.641516]), [84.993829, -15.820725, -37.736589, 57.497002, 62.008852, -34.964581, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.MoveL(p([-87.947502, 15753.342773, -3056.371826, 162.364741, 57.321011, -139.12254]), [83.865207, -17.204132, -23.104629, 94.375731, 49.26047, -53.900868, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    print('Done instruction: 10')
    sys.stdout.flush()
    r.MoveL(p([-87.947502, 15753.342773, -3056.371826, 162.364741, 57.321011, -139.12254]), [83.865207, -17.204132, -23.104629, 94.375731, 49.26047, -53.900868, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.setSpeed(50.0)
    r.MoveL(p([-87.947502, 15753.342773, -3323.071777, 178.450701, -27.782697, -41.102688]), [91.280214, -24.514099, -7.482821, 94.264844, 27.576637, 52.827242, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.MoveL(p([-87.947502, 15734.292969, -3342.121826, 115.212292, -23.920623, 8.299772]), [82.536012, -9.623914, -3.65663, 110.966378, 66.076926, 91.743683, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.setSpeed(50.0)
    r.MoveL(p([-87.947502, 15467.592773, -3342.121826, 106.861708, 12.533873, 22.086494]), [109.719609, 2.464938, 10.53837, 161.900353, 67.639292, 65.645182, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    print('Done instruction: 20')
    sys.stdout.flush()
    r.setSpeed(1000.0)
    r.RunCode('ArcEnd', True)
    r.MoveL(p([-87.947502, 15467.592773, -3342.121826, 106.861708, 12.533873, 22.086494]), [109.719609, 2.464938, 10.53837, 161.900353, 67.639292, 65.645182, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.MoveL(p([-93.977729, 15961.562547, -2860.212507, 106.861708, 12.533873, 22.086494]), [79.404467, -8.562284, -21.927019, 140.074273, 53.80921, 114.164583, 2984.67809, 2570.1637, 563.830565], [0.0, 0.0, 1.0])
    r.ProgFinish('Curve1')
    r.PROG = r.PROG_LIST.pop()
    for line in r.PROG:
        print(line)

    if len(r.LOG) > 0:
        mbox('Program generation LOG:\n\n' + robot.LOG)
    input('Press Enter to close...')


if __name__ == '__main__':
    # test_post2()
    test_post()
# okay decompiling Fanuc_R30iA.pyc
